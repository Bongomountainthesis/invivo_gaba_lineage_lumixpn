#!/usr/local/bin/Rscript

################load data into R
library(beadarray)
library(gplots)

load("data/BSData.quantile.RData")

dat <- read.csv("results/f_test.csv")

E <- exprs(BSData.quantile)

################find genes which are massively significant and remove genes that don't change much
inds <-which(dat[,"adj.P.Val"]<1.00E-008)

ids <- dat[inds,"ID"]

ids <- as.character(ids)

filteredE <- E[ids,]

#remove genes that don't change in any of the comparisons by a FC of x
changed.genes<-apply(filteredE,1,function(x){any(x>10)})
filteredE2<-filteredE[changed.genes,]

##################find the names of those genes (for the heatmap)
symbol <- dat[inds,"symbol"]

names <- c("E11.5a","E11.5b","E14.5a","E14.5b","E14.5c","E14.5d","P1a","P1b")

###################draw heatmap
postscript(file="results/heatmap.ps", horizontal=FALSE)
heatmap.2(filteredE[,],
		Colv=NA,
		col=greenred(75), 
		scale="none",
		key=TRUE,
		keysize=0.75,
		symkey=FALSE,
		density.info="none",
		trace="none", 
		labRow=NA,
		labCol=NA,
		cexRow=0.75,
	)
dev.off()

################Clustering####################################
###########try hopach to define numbers of clusters
library(hopach)

#compute the distance matrix first - try cosangle or euclid
gene.dist <- distancematrix(filteredE2, "euclid")

#now run hopach. K score relates to the level pf the dendrogram at which to call the clusters
gene.hopach <- hopach(filteredE2, dmat=gene.dist, d="euclid",K=1)

#plot distance matrix
postscript(file="results/distancematrix.ps", horizontal=FALSE)
dplot(gene.dist, 
	gene.hopach, 
	ord = "cluster", 
	main = "FACS Mice - Gene Distance Matrix", 
	showclusters = TRUE)
dev.off()

#how many gene clusters are there?
gene.hopach$clust$k

#run Mfuzz to plot clusters
library(Mfuzz)
tmp_expr = new('ExpressionSet', exprs=filteredE2)
cl = mfuzz(tmp_expr, c=8,m=2)

############define own version of Mfuzz plots to keep y-axis on same scale and let the labels turn 90deg
matt.plot<-function (eset, cl, mfrow = c(1, 1), colo, min.mem = 0, time.labels, new.window = TRUE, ymin=-999, ymax=-999, xlab="Time", ylab="Expression Chan ges")
{
    clusterindex <- cl[[3]]
    memship <- cl[[4]]
    memship[memship < min.mem] <- -1
    colorindex <- integer(dim(exprs(eset))[[1]])
    if (missing(colo)) {
        colo <- c("#FF8F00", "#FFA700", "#FFBF00", "#FFD700",
            "#FFEF00", "#F7FF00", "#DFFF00", "#C7FF00", "#AFFF00",
            "#97FF00", "#80FF00", "#68FF00", "#50FF00", "#38FF00",
            "#20FF00", "#08FF00", "#00FF10", "#00FF28", "#00FF40",
            "#00FF58", "#00FF70", "#00FF87", "#00FF9F", "#00FFB7",
            "#00FFCF", "#00FFE7", "#00FFFF", "#00E7FF", "#00CFFF",
            "#00B7FF", "#009FFF", "#0087FF", "#0070FF", "#0058FF",
            "#0040FF", "#0028FF", "#0010FF", "#0800FF", "#2000FF",
            "#3800FF", "#5000FF", "#6800FF", "#8000FF", "#9700FF",
            "#AF00FF", "#C700FF", "#DF00FF", "#F700FF", "#FF00EF",
            "#FF00D7", "#FF00BF", "#FF00A7", "#FF008F", "#FF0078",
            "#FF0060", "#FF0048", "#FF0030", "#FF0018")
    }
    colorseq <- seq(0, 1, length = length(colo))
    for (j in 1:max(clusterindex)) {
        tmp <- exprs(eset)[clusterindex == j, ]
        tmpmem <- memship[clusterindex == j, j]
        if (((j - 1)%%(mfrow[1] * mfrow[2])) == 0) {
            if (new.window)
                X11()
            par(mfrow = mfrow)
 
            if (sum(clusterindex == j) == 0) {
                if(ymin == -999){ymin <- -1}
                if(ymax == -999) {ymax <- +1}
            }
            else {
                if(ymin == -999) {ymin <- min(tmp)}
                if(ymax == -999) {ymax <- max(tmp)}
            }
            plot.default(x = NA, xlim = c(1, dim(exprs(eset))[[2]]),
                ylim = c(ymin, ymax), xlab = xlab, ylab = ylab,
                main = paste("Cluster", j), axes = FALSE)
            if (missing(time.labels)) {
                axis(1, 1:dim(exprs(eset))[[2]], c(1:dim(exprs(eset))[[2]]))
                axis(2)
            }
           else {
                axis(1, 1:dim(exprs(eset))[[2]], time.labels)
                axis(2)
            }
        }
        else {
            if (sum(clusterindex == j) == 0) {
                if(ymin == -999){ymin <- -1}
                if(ymax == -999) {ymax <- +1}
            }
            else {
                if(ymin == -999) {ymin <- min(tmp)}
                if(ymax == -999) {ymax <- max(tmp)}
            }
            plot.default(x = NA, xlim = c(1, dim(exprs(eset))[[2]]),
                ylim = c(ymin, ymax), xlab = xlab, ylab = ylab,
                main = paste("Cluster", j), axes = FALSE)
            if (missing(time.labels)) {
                axis(1, 1:dim(exprs(eset))[[2]], c(1:dim(exprs(eset))[[2]]))
                axis(2)
            }
            else {
                axis(1, 1:dim(exprs(eset))[[2]], time.labels)
                axis(2)
            }
        }
        if (!(sum(clusterindex == j) == 0)) {
            for (jj in 1:(length(colorseq) - 1)) {
                tmpcol <- (tmpmem >= colorseq[jj] & tmpmem <=
                  colorseq[jj + 1])
                if (sum(tmpcol) > 0) {
                  tmpind <- which(tmpcol)
                  for (k in 1:length(tmpind)) {
                    lines(tmp[tmpind[k], ], col = colo[jj])
                  }
                }
            }
        }
    }
}

##########mfuzz.plot - but draw my version called matt.plot
postscript(file="results/Mfuzz/cluster_stability/clusters8.ps", paper="special",width=14,height=9, horizontal=FALSE)
par(las=2)
matt.plot(tmp_expr,cl=cl,
	   mfrow=c(2,5),
	   new.window = FALSE,
	   time.labels=names,
	   min.mem=0.3,
           ymin = 6,
           ymax = 16,
           xlab = ""
                )
dev.off()

#find eigengene/mediod of each cluster
centers <- cl$centers

#########find genes that make up the core clusters
#extract genes from each core cluster (ie the genes used to make the clusters) and get membership scores
core <- acore(tmp_expr, cl, min.acore=0.1)

#then annotate them all from the f_test table and make individual csv files with the FC from the f_test table

#get the illumina IDs out of dat (f_test) and rename all the rows as illumina ids
rownames(dat) <- dat[,"ID"]

annotate.cluster <- function(core.num){
   this.core <- core[[core.num]]

   #find rows from dat (f_test) that are in each cluster 
   dat.core <- dat[rownames(this.core),]

   #make a dataframe to combine the cluster gene info from limma f_test results and core membership score for each cluster
   cluster <- data.frame(dat.core, this.core[,2])

   #rename membership column to membership
   colnames(cluster)[17] <- "Membership"

   #order by membership score
   cluster <- cluster[order(cluster[,"Membership"],decreasing=TRUE),]

   #save it as a csv file named by the cluster number
   write.csv(cluster, paste("results/Mfuzz/8cluster",core.num,".csv",sep=""))
}



for(i in 1:length(core)){
  annotate.cluster(i)
}

##########then use cluster patterns to assign every gene on the array to a cluster
#for each gene in E, find the Euclidean distance to the eigengene
library(bioDist)
res<-list()
for(i in 1:nrow(centers)){
   cent.d <- function(x){euc(rbind(centers[i,],x))}
   res[[i]] <- apply(E, 1, cent.d)
}
center.dists<-do.call(cbind, res)
save(center.dists, file="results/center_dists.RData")

#extract the closest cluster to which each gene fits into (closest) and the distance from the gene to that eigengene/mediod (closest.dist)
closest<-apply(center.dists, 1,which.min)
closest.dist<-apply(center.dists, 1, min)
closest.genes <- data.frame(closest,closest.dist)

#order all tables into same order
dat.close <- dat[order(rownames(dat), decreasing=TRUE),]
closest.genes <- closest.genes[order(rownames(closest.genes),decreasing=TRUE),]

#add them to the limma f_test results
close.genes <- data.frame(dat.close,closest.genes)
#write to csv file
write.csv(close.genes, "results/Mfuzz/genes_in_8clusters.csv")




#######DONT DO THIS - this was to reannotate everything in a for loop - not much point as can get it from the f_test
#library(biomaRt)
#library(illuminaMousev2BeadID.db)
#library(illuminaMousev2.db) 
#
#annotate.core<-function(core.num){
#   core<- core[[core.num]]
#   ids = rownames(core)
#   membership =core[,2]
# 
#   symbol <- mget(ids, illuminaMousev2SYMBOL, ifnotfound = NA)
#   sum(sapply(symbol, length) > 1)
#   symbol <- as.character(symbol)
#   length(which(symbol=="NA"))
#
#   ensembl = mget(ids, illuminaMousev2ENSEMBL, ifnotfound = NA)
#   length(which(is.na(ensembl)))
#
#   sum(sapply(ensembl, length) > 1)
#   crosshyb <- which(( sapply(ensembl, length) ) > 1)  
#   length(crosshyb)
#   ensembl[crosshyb] <- NA
#   ensembl <- as.character(ensembl)
#   ensembl[ensembl=="NA"] = NA
#   length(which(is.na(ensembl)))
# 
#   ensmart <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
#
#   filters <- "ensembl_gene_id"
#   values <- ensembl[!is.na(ensembl)]
#   attributes <- c("ensembl_gene_id", "chromosome_name","start_position", "end_position", "strand", "description")
#   ens.anno <- getBM(filters=filters, values=values, attributes=attributes, mart=ensmart)
#   rownames(ens.anno)<-ens.anno[,1]
#
#   anno <- data.frame(
#                   ID = as.character(ids),
#                   EnsemblID = ensembl,
#                   symbol=symbol,
#                   ens.anno[ensembl,],
#                   stringsAsFactors=F
#              )
#   rownames(anno) <- anno[,"ID"]
#
#   #add membership column
#
#   anno <- data.frame(anno,core)
#
#   write.csv(anno, paste("results/Mfuzz/cluster",core.num,".csv",sep=""))
#}


#for(i in 1:length(core)){
#  annotate.core(i)
#}
